
242MidtermQuestion1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000378  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000520  08000520  00010520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000530  08000530  00010538  2**0
                  CONTENTS
  4 .ARM          00000000  08000530  08000530  00010538  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000530  08000538  00010538  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000530  08000530  00010530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000534  08000534  00010534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010538  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010538  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00010538  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000355  00000000  00000000  00010562  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000013e  00000000  00000000  000108b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000098  00000000  00000000  000109f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000080  00000000  00000000  00010a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000f58  00000000  00000000  00010b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000005c6  00000000  00000000  00011a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003c30  00000000  00000000  0001202e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00015c5e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000001cc  00000000  00000000  00015cb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000508 	.word	0x08000508

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000508 	.word	0x08000508

080001e8 <init_leds>:
#define LED_RED 14
#define LED_GREEN 12
#define LED_BLUE 15
#define LED_ORANGE 13

void init_leds(){
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	AHB1ENR = 1 << GPIOD_EN;
 80001ec:	4b05      	ldr	r3, [pc, #20]	; (8000204 <init_leds+0x1c>)
 80001ee:	2208      	movs	r2, #8
 80001f0:	601a      	str	r2, [r3, #0]
	GPIOD_MODER = MODER_OUTPUT(LED_RED) | MODER_OUTPUT(LED_BLUE)
 80001f2:	4b05      	ldr	r3, [pc, #20]	; (8000208 <init_leds+0x20>)
 80001f4:	f04f 42aa 	mov.w	r2, #1426063360	; 0x55000000
 80001f8:	601a      	str	r2, [r3, #0]
			| MODER_OUTPUT(LED_GREEN) | MODER_OUTPUT(LED_ORANGE);
}
 80001fa:	bf00      	nop
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bc80      	pop	{r7}
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop
 8000204:	40023830 	.word	0x40023830
 8000208:	40020c00 	.word	0x40020c00

0800020c <get_string_mod>:
uint8_t get_string_mod(const char* str){
 800020c:	b480      	push	{r7}
 800020e:	b085      	sub	sp, #20
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
	uint32_t sum = 0;
 8000214:	2300      	movs	r3, #0
 8000216:	60fb      	str	r3, [r7, #12]
	uint8_t i = 0;
 8000218:	2300      	movs	r3, #0
 800021a:	72fb      	strb	r3, [r7, #11]
	while(str[i] != '\0'){
 800021c:	e00a      	b.n	8000234 <get_string_mod+0x28>
		sum += (uint8_t)str[i];
 800021e:	7afb      	ldrb	r3, [r7, #11]
 8000220:	687a      	ldr	r2, [r7, #4]
 8000222:	4413      	add	r3, r2
 8000224:	781b      	ldrb	r3, [r3, #0]
 8000226:	461a      	mov	r2, r3
 8000228:	68fb      	ldr	r3, [r7, #12]
 800022a:	4413      	add	r3, r2
 800022c:	60fb      	str	r3, [r7, #12]
		i++;
 800022e:	7afb      	ldrb	r3, [r7, #11]
 8000230:	3301      	adds	r3, #1
 8000232:	72fb      	strb	r3, [r7, #11]
	while(str[i] != '\0'){
 8000234:	7afb      	ldrb	r3, [r7, #11]
 8000236:	687a      	ldr	r2, [r7, #4]
 8000238:	4413      	add	r3, r2
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d1ee      	bne.n	800021e <get_string_mod+0x12>
	}
	return sum%4;
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	b2db      	uxtb	r3, r3
 8000244:	f003 0303 	and.w	r3, r3, #3
 8000248:	b2db      	uxtb	r3, r3
}
 800024a:	4618      	mov	r0, r3
 800024c:	3714      	adds	r7, #20
 800024e:	46bd      	mov	sp, r7
 8000250:	bc80      	pop	{r7}
 8000252:	4770      	bx	lr

08000254 <mod_to_led_pin>:
uint8_t mod_to_led_pin(uint8_t modValue){
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	4603      	mov	r3, r0
 800025c:	71fb      	strb	r3, [r7, #7]
	uint8_t pin = 0;
 800025e:	2300      	movs	r3, #0
 8000260:	73fb      	strb	r3, [r7, #15]
	switch(modValue){
 8000262:	79fb      	ldrb	r3, [r7, #7]
 8000264:	2b03      	cmp	r3, #3
 8000266:	d817      	bhi.n	8000298 <mod_to_led_pin+0x44>
 8000268:	a201      	add	r2, pc, #4	; (adr r2, 8000270 <mod_to_led_pin+0x1c>)
 800026a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800026e:	bf00      	nop
 8000270:	08000281 	.word	0x08000281
 8000274:	08000287 	.word	0x08000287
 8000278:	0800028d 	.word	0x0800028d
 800027c:	08000293 	.word	0x08000293
		case 0:
			pin = LED_RED;
 8000280:	230e      	movs	r3, #14
 8000282:	73fb      	strb	r3, [r7, #15]
		break;
 8000284:	e00a      	b.n	800029c <mod_to_led_pin+0x48>
		case 1:
			pin = LED_BLUE;
 8000286:	230f      	movs	r3, #15
 8000288:	73fb      	strb	r3, [r7, #15]
		break;
 800028a:	e007      	b.n	800029c <mod_to_led_pin+0x48>
		case 2:
			pin = LED_ORANGE;
 800028c:	230d      	movs	r3, #13
 800028e:	73fb      	strb	r3, [r7, #15]
		break;
 8000290:	e004      	b.n	800029c <mod_to_led_pin+0x48>
		case 3:
			pin = LED_GREEN;
 8000292:	230c      	movs	r3, #12
 8000294:	73fb      	strb	r3, [r7, #15]
		break;
 8000296:	e001      	b.n	800029c <mod_to_led_pin+0x48>
		default:
			pin = 0;
 8000298:	2300      	movs	r3, #0
 800029a:	73fb      	strb	r3, [r7, #15]

		}
	return pin;
 800029c:	7bfb      	ldrb	r3, [r7, #15]
}
 800029e:	4618      	mov	r0, r3
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr

080002a8 <turn_led_on>:
void turn_led_on(uint8_t modValue){
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b084      	sub	sp, #16
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	4603      	mov	r3, r0
 80002b0:	71fb      	strb	r3, [r7, #7]
	uint8_t pin = mod_to_led_pin(modValue);
 80002b2:	79fb      	ldrb	r3, [r7, #7]
 80002b4:	4618      	mov	r0, r3
 80002b6:	f7ff ffcd 	bl	8000254 <mod_to_led_pin>
 80002ba:	4603      	mov	r3, r0
 80002bc:	73fb      	strb	r3, [r7, #15]
	GPIOD_ODR |= 1 << pin;
 80002be:	4b07      	ldr	r3, [pc, #28]	; (80002dc <turn_led_on+0x34>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	7bfa      	ldrb	r2, [r7, #15]
 80002c4:	2101      	movs	r1, #1
 80002c6:	fa01 f202 	lsl.w	r2, r1, r2
 80002ca:	4611      	mov	r1, r2
 80002cc:	4a03      	ldr	r2, [pc, #12]	; (80002dc <turn_led_on+0x34>)
 80002ce:	430b      	orrs	r3, r1
 80002d0:	6013      	str	r3, [r2, #0]
}
 80002d2:	bf00      	nop
 80002d4:	3710      	adds	r7, #16
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	40020c14 	.word	0x40020c14

080002e0 <turn_led_off>:

void turn_led_off(uint8_t modValue){
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	4603      	mov	r3, r0
 80002e8:	71fb      	strb	r3, [r7, #7]
	uint8_t pin = mod_to_led_pin(modValue);
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	4618      	mov	r0, r3
 80002ee:	f7ff ffb1 	bl	8000254 <mod_to_led_pin>
 80002f2:	4603      	mov	r3, r0
 80002f4:	73fb      	strb	r3, [r7, #15]
	GPIOD_ODR &= ~(1 << pin);
 80002f6:	4b07      	ldr	r3, [pc, #28]	; (8000314 <turn_led_off+0x34>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	7bfa      	ldrb	r2, [r7, #15]
 80002fc:	2101      	movs	r1, #1
 80002fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000302:	43d2      	mvns	r2, r2
 8000304:	4611      	mov	r1, r2
 8000306:	4a03      	ldr	r2, [pc, #12]	; (8000314 <turn_led_off+0x34>)
 8000308:	400b      	ands	r3, r1
 800030a:	6013      	str	r3, [r2, #0]
}
 800030c:	bf00      	nop
 800030e:	3710      	adds	r7, #16
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	40020c14 	.word	0x40020c14

08000318 <turn_name_on>:

void turn_name_on(const char* name){
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
	uint8_t nameMod = get_string_mod(name);
 8000320:	6878      	ldr	r0, [r7, #4]
 8000322:	f7ff ff73 	bl	800020c <get_string_mod>
 8000326:	4603      	mov	r3, r0
 8000328:	73fb      	strb	r3, [r7, #15]
	turn_led_on(nameMod);
 800032a:	7bfb      	ldrb	r3, [r7, #15]
 800032c:	4618      	mov	r0, r3
 800032e:	f7ff ffbb 	bl	80002a8 <turn_led_on>
}
 8000332:	bf00      	nop
 8000334:	3710      	adds	r7, #16
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}

0800033a <turn_name_off>:

void turn_name_off(const char* name){
 800033a:	b580      	push	{r7, lr}
 800033c:	b084      	sub	sp, #16
 800033e:	af00      	add	r7, sp, #0
 8000340:	6078      	str	r0, [r7, #4]
	uint8_t nameMod = get_string_mod(name);
 8000342:	6878      	ldr	r0, [r7, #4]
 8000344:	f7ff ff62 	bl	800020c <get_string_mod>
 8000348:	4603      	mov	r3, r0
 800034a:	73fb      	strb	r3, [r7, #15]
	turn_led_off(nameMod);
 800034c:	7bfb      	ldrb	r3, [r7, #15]
 800034e:	4618      	mov	r0, r3
 8000350:	f7ff ffc6 	bl	80002e0 <turn_led_off>
}
 8000354:	bf00      	nop
 8000356:	3710      	adds	r7, #16
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}

0800035c <turn_surname_on>:
//written these functions for sake of completeness
void turn_surname_on(const char* surname){
 800035c:	b580      	push	{r7, lr}
 800035e:	b084      	sub	sp, #16
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
	uint8_t nameMod = get_string_mod(surname);
 8000364:	6878      	ldr	r0, [r7, #4]
 8000366:	f7ff ff51 	bl	800020c <get_string_mod>
 800036a:	4603      	mov	r3, r0
 800036c:	73fb      	strb	r3, [r7, #15]
	turn_led_on(nameMod);
 800036e:	7bfb      	ldrb	r3, [r7, #15]
 8000370:	4618      	mov	r0, r3
 8000372:	f7ff ff99 	bl	80002a8 <turn_led_on>
}
 8000376:	bf00      	nop
 8000378:	3710      	adds	r7, #16
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}

0800037e <turn_surname_off>:
//written these functions for sake of completeness
void turn_surname_off(const char* surname){
 800037e:	b580      	push	{r7, lr}
 8000380:	b084      	sub	sp, #16
 8000382:	af00      	add	r7, sp, #0
 8000384:	6078      	str	r0, [r7, #4]
	uint8_t nameMod = get_string_mod(surname);
 8000386:	6878      	ldr	r0, [r7, #4]
 8000388:	f7ff ff40 	bl	800020c <get_string_mod>
 800038c:	4603      	mov	r3, r0
 800038e:	73fb      	strb	r3, [r7, #15]
	turn_led_off(nameMod);
 8000390:	7bfb      	ldrb	r3, [r7, #15]
 8000392:	4618      	mov	r0, r3
 8000394:	f7ff ffa4 	bl	80002e0 <turn_led_off>
}
 8000398:	bf00      	nop
 800039a:	3710      	adds	r7, #16
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}

080003a0 <delay_fixed>:

void delay_fixed(){
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 80003a6:	2300      	movs	r3, #0
 80003a8:	607b      	str	r3, [r7, #4]
	for(i = 0; i < 256*256*256*2; i++);
 80003aa:	2300      	movs	r3, #0
 80003ac:	607b      	str	r3, [r7, #4]
 80003ae:	e002      	b.n	80003b6 <delay_fixed+0x16>
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	3301      	adds	r3, #1
 80003b4:	607b      	str	r3, [r7, #4]
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80003bc:	d3f8      	bcc.n	80003b0 <delay_fixed+0x10>
}
 80003be:	bf00      	nop
 80003c0:	bf00      	nop
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bc80      	pop	{r7}
 80003c8:	4770      	bx	lr
	...

080003cc <main>:

int main(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b086      	sub	sp, #24
 80003d0:	af00      	add	r7, sp, #0
    const char name[] = "alican";
 80003d2:	4a24      	ldr	r2, [pc, #144]	; (8000464 <main+0x98>)
 80003d4:	f107 030c 	add.w	r3, r7, #12
 80003d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003dc:	6018      	str	r0, [r3, #0]
 80003de:	3304      	adds	r3, #4
 80003e0:	8019      	strh	r1, [r3, #0]
 80003e2:	3302      	adds	r3, #2
 80003e4:	0c0a      	lsrs	r2, r1, #16
 80003e6:	701a      	strb	r2, [r3, #0]
    const char surname[] = "ceviker";
 80003e8:	4a1f      	ldr	r2, [pc, #124]	; (8000468 <main+0x9c>)
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003f0:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t nameLen = sizeof(name)/sizeof(char) - 1;
 80003f4:	2306      	movs	r3, #6
 80003f6:	75bb      	strb	r3, [r7, #22]
    uint8_t surnameLen = sizeof(name)/sizeof(char) - 1;
 80003f8:	2306      	movs	r3, #6
 80003fa:	757b      	strb	r3, [r7, #21]
    uint8_t  i = 0;
 80003fc:	2300      	movs	r3, #0
 80003fe:	75fb      	strb	r3, [r7, #23]
    init_leds();
 8000400:	f7ff fef2 	bl	80001e8 <init_leds>
    for(i = 0; i < nameLen; i++){
 8000404:	2300      	movs	r3, #0
 8000406:	75fb      	strb	r3, [r7, #23]
 8000408:	e010      	b.n	800042c <main+0x60>
    	turn_name_on(name);
 800040a:	f107 030c 	add.w	r3, r7, #12
 800040e:	4618      	mov	r0, r3
 8000410:	f7ff ff82 	bl	8000318 <turn_name_on>
    	delay_fixed();
 8000414:	f7ff ffc4 	bl	80003a0 <delay_fixed>
    	turn_name_off(name);
 8000418:	f107 030c 	add.w	r3, r7, #12
 800041c:	4618      	mov	r0, r3
 800041e:	f7ff ff8c 	bl	800033a <turn_name_off>
    	delay_fixed();
 8000422:	f7ff ffbd 	bl	80003a0 <delay_fixed>
    for(i = 0; i < nameLen; i++){
 8000426:	7dfb      	ldrb	r3, [r7, #23]
 8000428:	3301      	adds	r3, #1
 800042a:	75fb      	strb	r3, [r7, #23]
 800042c:	7dfa      	ldrb	r2, [r7, #23]
 800042e:	7dbb      	ldrb	r3, [r7, #22]
 8000430:	429a      	cmp	r2, r3
 8000432:	d3ea      	bcc.n	800040a <main+0x3e>
    }
    for(i = 0; i < surnameLen; i++){
 8000434:	2300      	movs	r3, #0
 8000436:	75fb      	strb	r3, [r7, #23]
 8000438:	e00e      	b.n	8000458 <main+0x8c>
    	turn_surname_on(surname);
 800043a:	1d3b      	adds	r3, r7, #4
 800043c:	4618      	mov	r0, r3
 800043e:	f7ff ff8d 	bl	800035c <turn_surname_on>
       	delay_fixed();
 8000442:	f7ff ffad 	bl	80003a0 <delay_fixed>
       	turn_surname_off(surname);
 8000446:	1d3b      	adds	r3, r7, #4
 8000448:	4618      	mov	r0, r3
 800044a:	f7ff ff98 	bl	800037e <turn_surname_off>
       	delay_fixed();
 800044e:	f7ff ffa7 	bl	80003a0 <delay_fixed>
    for(i = 0; i < surnameLen; i++){
 8000452:	7dfb      	ldrb	r3, [r7, #23]
 8000454:	3301      	adds	r3, #1
 8000456:	75fb      	strb	r3, [r7, #23]
 8000458:	7dfa      	ldrb	r2, [r7, #23]
 800045a:	7d7b      	ldrb	r3, [r7, #21]
 800045c:	429a      	cmp	r2, r3
 800045e:	d3ec      	bcc.n	800043a <main+0x6e>
    }
	for(;;);
 8000460:	e7fe      	b.n	8000460 <main+0x94>
 8000462:	bf00      	nop
 8000464:	08000520 	.word	0x08000520
 8000468:	08000528 	.word	0x08000528

0800046c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800046c:	480d      	ldr	r0, [pc, #52]	; (80004a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800046e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000470:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000474:	480c      	ldr	r0, [pc, #48]	; (80004a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000476:	490d      	ldr	r1, [pc, #52]	; (80004ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000478:	4a0d      	ldr	r2, [pc, #52]	; (80004b0 <LoopForever+0xe>)
  movs r3, #0
 800047a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800047c:	e002      	b.n	8000484 <LoopCopyDataInit>

0800047e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800047e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000482:	3304      	adds	r3, #4

08000484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000488:	d3f9      	bcc.n	800047e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800048a:	4a0a      	ldr	r2, [pc, #40]	; (80004b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800048c:	4c0a      	ldr	r4, [pc, #40]	; (80004b8 <LoopForever+0x16>)
  movs r3, #0
 800048e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000490:	e001      	b.n	8000496 <LoopFillZerobss>

08000492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000494:	3204      	adds	r2, #4

08000496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000498:	d3fb      	bcc.n	8000492 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800049a:	f000 f811 	bl	80004c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800049e:	f7ff ff95 	bl	80003cc <main>

080004a2 <LoopForever>:

LoopForever:
    b LoopForever
 80004a2:	e7fe      	b.n	80004a2 <LoopForever>
  ldr   r0, =_estack
 80004a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004ac:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004b0:	08000538 	.word	0x08000538
  ldr r2, =_sbss
 80004b4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004b8:	2000001c 	.word	0x2000001c

080004bc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004bc:	e7fe      	b.n	80004bc <ADC_IRQHandler>
	...

080004c0 <__libc_init_array>:
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	4d0d      	ldr	r5, [pc, #52]	; (80004f8 <__libc_init_array+0x38>)
 80004c4:	4c0d      	ldr	r4, [pc, #52]	; (80004fc <__libc_init_array+0x3c>)
 80004c6:	1b64      	subs	r4, r4, r5
 80004c8:	10a4      	asrs	r4, r4, #2
 80004ca:	2600      	movs	r6, #0
 80004cc:	42a6      	cmp	r6, r4
 80004ce:	d109      	bne.n	80004e4 <__libc_init_array+0x24>
 80004d0:	4d0b      	ldr	r5, [pc, #44]	; (8000500 <__libc_init_array+0x40>)
 80004d2:	4c0c      	ldr	r4, [pc, #48]	; (8000504 <__libc_init_array+0x44>)
 80004d4:	f000 f818 	bl	8000508 <_init>
 80004d8:	1b64      	subs	r4, r4, r5
 80004da:	10a4      	asrs	r4, r4, #2
 80004dc:	2600      	movs	r6, #0
 80004de:	42a6      	cmp	r6, r4
 80004e0:	d105      	bne.n	80004ee <__libc_init_array+0x2e>
 80004e2:	bd70      	pop	{r4, r5, r6, pc}
 80004e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80004e8:	4798      	blx	r3
 80004ea:	3601      	adds	r6, #1
 80004ec:	e7ee      	b.n	80004cc <__libc_init_array+0xc>
 80004ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80004f2:	4798      	blx	r3
 80004f4:	3601      	adds	r6, #1
 80004f6:	e7f2      	b.n	80004de <__libc_init_array+0x1e>
 80004f8:	08000530 	.word	0x08000530
 80004fc:	08000530 	.word	0x08000530
 8000500:	08000530 	.word	0x08000530
 8000504:	08000534 	.word	0x08000534

08000508 <_init>:
 8000508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800050a:	bf00      	nop
 800050c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800050e:	bc08      	pop	{r3}
 8000510:	469e      	mov	lr, r3
 8000512:	4770      	bx	lr

08000514 <_fini>:
 8000514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000516:	bf00      	nop
 8000518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800051a:	bc08      	pop	{r3}
 800051c:	469e      	mov	lr, r3
 800051e:	4770      	bx	lr
